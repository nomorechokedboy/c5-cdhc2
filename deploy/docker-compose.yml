services:
    app:
        depends_on:
            nsqd:
                condition: service_healthy
            nsqlookupd:
                condition: service_healthy
        deploy:
            resources:
                limits:
                    memory: 1G
                    cpus: '1.0'
        image: quanlyhocvien-cdhc2:api
        env_file:
            - .env.prod
        restart: unless-stopped
        # Add security options for better compatibility
        security_opt:
            - seccomp:unconfined
        # Add capabilities if needed
        cap_add:
            - SYS_ADMIN
        healthcheck:
            test: ['CMD', 'curl', '-f', 'http://localhost:8080/healthz']
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        networks:
            - app-network
            - cron-network
            - minio-network
            - nsq-network
    web:
        depends_on:
            app:
                condition: service_healthy
        image: quanlyhocvien-cdhc2:web
        ports:
            - '3005:80'
        restart: unless-stopped
        networks:
            - app-network
        volumes:
            - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
        healthcheck:
            test:
                [
                    'CMD',
                    'wget',
                    '--no-verbose --tries=1 --spider',
                    'http://localhost/'
                ]
            interval: 30s
            timeout: 10s
            start_period: 40s
            retries: 3
    cron-scheduler:
        image: quanlyhocvien-cdhc2:cron
        environment:
            - TZ=Asia/Ho_Chi_Minh
            - APP_URL=http://app:8080
        volumes:
            - ./cron/logs:/var/log/cron:rw
        depends_on:
            app:
                condition: service_healthy
        restart: unless-stopped
        networks:
            - cron-network
        command: >
            sh -c "


              echo '# Student Birthday Notifications' > /etc/crontabs/root &&
              echo '0 0 * * 1 /bin/sh /scripts/weekly_birthday.sh >> /var/log/cron/weekly.log 2>&1' >> /etc/crontabs/root &&
              echo '0 0 1 * * /bin/sh /scripts/monthly_birthday.sh >> /var/log/cron/monthly.log 2>&1' >> /etc/crontabs/root &&
              echo '0 0 1 */3 * /bin/sh /scripts/quarterly_birthday.sh >> /var/log/cron/quarterly.log 2>&1' >> /etc/crontabs/root &&
              echo '0 0 * * 1 /bin/sh /scripts/weekly_cpv_official.sh >> /var/log/cron/weekly.log 2>&1' >> /etc/crontabs/root &&
              echo '0 0 1 * * /bin/sh /scripts/monthly_cpv_official.sh >> /var/log/cron/monthly.log 2>&1' >> /etc/crontabs/root &&
              echo '0 0 1 */3 * /bin/sh /scripts/quarterly_cpv_official.sh >> /var/log/cron/quarterly.log 2>&1' >> /etc/crontabs/root &&

              echo 'Current time after timezone setup:' &&
              date &&
              echo 'Cron jobs installed:' &&
              cat /etc/crontabs/root &&
              crond -f -l 2
            "

    # NSQ Lookup Daemon - service discovery for NSQ
    nsqlookupd:
        image: nsqio/nsq:v1.2.1
        command: /nsqlookupd
        ports:
            - '4161:4161' # HTTP port for admin interface
        networks:
            - nsq-network
        restart: unless-stopped
        healthcheck:
            test:
                [
                    'CMD',
                    'wget',
                    '--no-verbose',
                    '--tries=1',
                    '--spider',
                    'http://localhost:4161/ping'
                ]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 10s
    # NSQ Daemon - handles message queuing
    nsqd:
        image: nsqio/nsq:v1.2.1
        command: /nsqd --lookupd-tcp-address=nsqlookupd:4160 --broadcast-address=nsqd
        depends_on:
            nsqlookupd:
                condition: service_healthy
        ports:
            - '4151:4151' # HTTP port for admin interface
        networks:
            - nsq-network
        restart: unless-stopped
        volumes:
            - nsq-data:/data
        healthcheck:
            test:
                [
                    'CMD',
                    'wget',
                    '--no-verbose',
                    '--tries=1',
                    '--spider',
                    'http://localhost:4151/ping'
                ]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 15s
    # NSQ Admin UI (optional but recommended for monitoring)
    nsqadmin:
        image: nsqio/nsq:v1.2.1
        command: /nsqadmin --lookupd-http-address=nsqlookupd:4161
        depends_on:
            nsqlookupd:
                condition: service_healthy
            nsqd:
                condition: service_healthy
        ports:
            - '4171:4171' # Web UI port
        networks:
            - nsq-network
        restart: unless-stopped
        healthcheck:
            test:
                [
                    'CMD',
                    'wget',
                    '--no-verbose',
                    '--tries=1',
                    '--spider',
                    'http://localhost:4171/ping'
                ]
            interval: 15s
            timeout: 5s
            retries: 3
            start_period: 20s
    minio:
        image: docker.io/bitnamilegacy/minio:latest
        ports:
            - '9000:9000'
            - '9001:9001'
        environment:
            - MINIO_ROOT_USER=admin.cdhc2
            - MINIO_ROOT_PASSWORD=Cntt@Hc2
            - MINIO_DEFAULT_BUCKETS=my-first-bucket
        volumes:
            - 'minio_data:/bitnami/minio/data'
        networks:
            - minio-network
        healthcheck:
            test:
                ['CMD', 'curl', '-I', 'http://localhost:9000/minio/health/live']
            interval: 10s
            retries: 5
            start_period: 10s
            timeout: 5s
        restart: unless-stopped
networks:
    app-network:
        driver: bridge
    cron-network:
        driver: bridge
    nsq-network:
        driver: bridge
    minio-network:
        driver: bridge
volumes:
    nsq-data:
    minio_data:
        driver: local
